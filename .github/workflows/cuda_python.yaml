name: Deploy CUDA Python Docker Image
on:
  workflow_dispatch:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PYTHON_RELEASE_TAG: "20241016"
    strategy:
      fail-fast: false
      matrix:
        flavor: ["devel", "runtime"]
        python: ["3.12.7", "3.11.10", "3.10.15", "3.9.20"]
        base_image:
          - "12.4.1-cudnn-*-ubuntu22.04"
          - "12.2.2-cudnn8-*-ubuntu22.04"
          - "12.1.1-cudnn8-*-ubuntu22.04"
          - "11.8.0-cudnn8-*-ubuntu22.04"
          - "11.7.1-cudnn8-*-ubuntu22.04"
          - "11.6.2-cudnn8-*-ubuntu20.04"
          - "11.3.1-cudnn8-*-ubuntu20.04"

    steps:
      - name: Maximize build space
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          df -h

      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get Info
        id: info
        run: |
          cuda_version=$(echo "${{ matrix.base_image }}" | cut -d'-' -f1)
          cuda_short_version=$(echo $cuda_version | tr -d '.')
          python_short=$(echo "${{ matrix.python }}" | cut -d'.' -f1-2 | tr -d '.')
          base_image="nvcr.io/nvidia/cuda:$(echo "${{ matrix.base_image }}" | sed "s/\*/${{ matrix.flavor }}/g")"
          tag=ghcr.io/mjun0812/cuda${cuda_short_version}-python${python_short}-${{ matrix.flavor }}-server:latest

          echo "cuda_version=${cuda_version}" >> $GITHUB_OUTPUT
          echo "cuda_short_version=${cuda_short_version}" >> $GITHUB_OUTPUT
          echo "python_short=${python_short}" >> $GITHUB_OUTPUT
          echo "base_image=${base_image}" >> $GITHUB_OUTPUT
          echo "tag=${tag}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "./cuda_python/"
          build-args: |
            PYTHON=${{ matrix.python }}
            PYTHON_RELEASE_TAG=${{ env.PYTHON_RELEASE_TAG }}
            CUDA_VERSION=${{ steps.info.outputs.cuda_version }}
            BASE_IMAGE=${{ steps.info.outputs.base_image }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.info.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
